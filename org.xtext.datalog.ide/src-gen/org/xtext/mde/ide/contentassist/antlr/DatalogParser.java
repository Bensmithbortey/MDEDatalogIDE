/*
 * generated by Xtext 2.24.0
 */
package org.xtext.mde.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.mde.ide.contentassist.antlr.internal.InternalDatalogParser;
import org.xtext.mde.services.DatalogGrammarAccess;

public class DatalogParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DatalogGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DatalogGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementsAccess().getAlternatives(), "rule__Statements__Alternatives");
			builder.put(grammarAccess.getStmtPlusMinusAccess().getGroup(), "rule__StmtPlusMinus__Group__0");
			builder.put(grammarAccess.getStmtPlusAccess().getGroup(), "rule__StmtPlus__Group__0");
			builder.put(grammarAccess.getStmtPlusAccess().getGroup_1(), "rule__StmtPlus__Group_1__0");
			builder.put(grammarAccess.getStmtMinusAccess().getGroup(), "rule__StmtMinus__Group__0");
			builder.put(grammarAccess.getStmtMinusAccess().getGroup_1(), "rule__StmtMinus__Group_1__0");
			builder.put(grammarAccess.getConditionsAccess().getGroup(), "rule__Conditions__Group__0");
			builder.put(grammarAccess.getAssertionAccess().getGroup(), "rule__Assertion__Group__0");
			builder.put(grammarAccess.getAssertionMinusAccess().getGroup(), "rule__AssertionMinus__Group__0");
			builder.put(grammarAccess.getFormulaCAccess().getGroup(), "rule__FormulaC__Group__0");
			builder.put(grammarAccess.getFormulaCAccess().getGroup_1(), "rule__FormulaC__Group_1__0");
			builder.put(grammarAccess.getAtomAccess().getGroup(), "rule__Atom__Group__0");
			builder.put(grammarAccess.getAtomCAccess().getGroup(), "rule__AtomC__Group__0");
			builder.put(grammarAccess.getParamListAccess().getGroup(), "rule__ParamList__Group__0");
			builder.put(grammarAccess.getParamListAccess().getGroup_1(), "rule__ParamList__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getProgramAssignment(), "rule__Model__ProgramAssignment");
			builder.put(grammarAccess.getStmtPlusMinusAccess().getLeftAssignment_0(), "rule__StmtPlusMinus__LeftAssignment_0");
			builder.put(grammarAccess.getStmtPlusMinusAccess().getRightAssignment_1(), "rule__StmtPlusMinus__RightAssignment_1");
			builder.put(grammarAccess.getStmtPlusAccess().getPlusAssignment_0(), "rule__StmtPlus__PlusAssignment_0");
			builder.put(grammarAccess.getStmtPlusAccess().getRightPlusAssignment_1_1(), "rule__StmtPlus__RightPlusAssignment_1_1");
			builder.put(grammarAccess.getStmtMinusAccess().getMinusAssignment_0(), "rule__StmtMinus__MinusAssignment_0");
			builder.put(grammarAccess.getStmtMinusAccess().getRightMinusAssignment_1_1(), "rule__StmtMinus__RightMinusAssignment_1_1");
			builder.put(grammarAccess.getStatementsAccess().getConditionAssignment_0(), "rule__Statements__ConditionAssignment_0");
			builder.put(grammarAccess.getStatementsAccess().getAssertionAssignment_1(), "rule__Statements__AssertionAssignment_1");
			builder.put(grammarAccess.getConditionsAccess().getCondAssignment_0(), "rule__Conditions__CondAssignment_0");
			builder.put(grammarAccess.getConditionsAccess().getSignAssignment_1(), "rule__Conditions__SignAssignment_1");
			builder.put(grammarAccess.getConditionsAccess().getRightAssignment_2(), "rule__Conditions__RightAssignment_2");
			builder.put(grammarAccess.getConditionsAccess().getDotAssignment_3(), "rule__Conditions__DotAssignment_3");
			builder.put(grammarAccess.getAssertionAccess().getTruthAssignment_0(), "rule__Assertion__TruthAssignment_0");
			builder.put(grammarAccess.getAssertionAccess().getDotAssignment_1(), "rule__Assertion__DotAssignment_1");
			builder.put(grammarAccess.getAssertionMinusAccess().getCheckAssignment_0(), "rule__AssertionMinus__CheckAssignment_0");
			builder.put(grammarAccess.getAssertionMinusAccess().getDotAssignment_1(), "rule__AssertionMinus__DotAssignment_1");
			builder.put(grammarAccess.getFormulaCAccess().getFirstAssignment_0(), "rule__FormulaC__FirstAssignment_0");
			builder.put(grammarAccess.getFormulaCAccess().getCommaAssignment_1_1(), "rule__FormulaC__CommaAssignment_1_1");
			builder.put(grammarAccess.getFormulaCAccess().getRightAssignment_1_2(), "rule__FormulaC__RightAssignment_1_2");
			builder.put(grammarAccess.getAtomAccess().getNameAssignment_0(), "rule__Atom__NameAssignment_0");
			builder.put(grammarAccess.getAtomAccess().getLpAssignment_1(), "rule__Atom__LpAssignment_1");
			builder.put(grammarAccess.getAtomAccess().getListAssignment_2(), "rule__Atom__ListAssignment_2");
			builder.put(grammarAccess.getAtomAccess().getRpAssignment_3(), "rule__Atom__RpAssignment_3");
			builder.put(grammarAccess.getAtomCAccess().getNameAssignment_0(), "rule__AtomC__NameAssignment_0");
			builder.put(grammarAccess.getAtomCAccess().getLpAssignment_1(), "rule__AtomC__LpAssignment_1");
			builder.put(grammarAccess.getAtomCAccess().getListAssignment_2(), "rule__AtomC__ListAssignment_2");
			builder.put(grammarAccess.getAtomCAccess().getRpAssignment_3(), "rule__AtomC__RpAssignment_3");
			builder.put(grammarAccess.getParamListAccess().getLeftAssignment_0(), "rule__ParamList__LeftAssignment_0");
			builder.put(grammarAccess.getParamListAccess().getCommaAssignment_1_1(), "rule__ParamList__CommaAssignment_1_1");
			builder.put(grammarAccess.getParamListAccess().getRightAssignment_1_2(), "rule__ParamList__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment(), "rule__Primary__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DatalogGrammarAccess grammarAccess;

	@Override
	protected InternalDatalogParser createParser() {
		InternalDatalogParser result = new InternalDatalogParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DatalogGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DatalogGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
