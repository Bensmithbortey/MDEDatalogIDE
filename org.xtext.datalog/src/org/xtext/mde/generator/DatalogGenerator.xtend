/*
 * generated by Xtext 2.24.0
 */
package org.xtext.mde.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.mde.datalog.Assertion
import org.xtext.mde.datalog.AssertionMinus
import org.xtext.mde.datalog.Conditions
import org.xtext.mde.datalog.Model

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DatalogGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as Model
		fsa.generateFile(deriveTargetFileNameFor(model, resource), model.generate)
		
		val className = resource.deriveClassName
		fsa.generateFile(className + '.java', model.doGenerateClass(className) )
	}
	
	def deriveClassName(Resource resource){
		val origFileName = resource.URI.lastSegment
		
		origFileName.substring(0, origFileName.indexOf('.')).toFirstUpper
	}
	
	def generate(Model model) '''
		Model contains:
		
		- «model.eAllContents.filter(Conditions).size» Conditions
		- «model.eAllContents.filter(Assertion).size» Assertions Plus
		- «model.eAllContents.filter(AssertionMinus).size» Assertions Minus
	'''
	
	def doGenerateClass(Model model, String className)'''
	import runtime.datalog;
	
	public class «className» {
	
		public static void main(String[] args) {
			
			Datalog d = new Datalog() {
				@Override
				public void run() {
					addSingleTruthToList("male", "grandpaSmith");
					addSingleTruthToList("male", "mrSmith");
					addSingleTruthToList("male", "peterSmith");
					addSingleTruthToList("male", "johnJones");
					addSingleTruthToList("male", "babyJones");
					
					addSingleTruthToList("female", "mrsSmith");
					addSingleTruthToList("female", "maryJones");
					addSingleTruthToList("female", "sallyWilkinson");
					
					addDoubleTruthToList("father", "grandpaSmith", "mrSmith");
					addDoubleTruthToList("father", "mrSmith", "peterSmith");
					addDoubleTruthToList("father", "mrSmith", "maryJones");
					addDoubleTruthToList("father", "johnJones", "babyJones");
					
					addDoubleTruthToList("husband_wife", "mrSmith", "mrsSmith");
					addDoubleTruthToList("husband_wife", "johnJones", "maryJones");
					
					addDoubleTruthToList("mother", "mrsSmith", "peterSmith");
					addDoubleTruthToList("mother", "mrsSmith", "maryJones");
					addDoubleTruthToList("mother", "maryJones", "babyJones");
					
					addDoubleTruthToList("loves", "peterSmith", "sallyWilkinson");
	
					System.out.println(getSimpleTruth("male", "mrSmith"));
					System.out.println(getSimpleTruth("male", "mrsSmith"));
					System.out.println(getListTruth("female"));
					System.out.println(getMapTruth("loves", null, "johnJones"));
					System.out.println(getMapTruth("loves", null, null));
				}
			};
			d.run();
	
		}
	
	}
	'''
	
//	dispatch def generateJavaStatement(StmtPlusMinus program) ''''''
//	dispatch def generateJavaStatement(StmtPlus plus)'''«plus.generateJavaPlus»'''
//	dispatch def generateJavaStatement(StmtMinus minus)'''«minus.generateJavaMinus»'''
//	
//	dispatch def generateJavaPlus(Statements stmt)''''''
//	dispatch def generateJavaPlus(Conditions cond)'''System.out.println(getMapTruth(«cond.right.first.name», «cond.right.first.list.value», «cond.right.first.list.value»));'''
//	dispatch def generateJavaPlus(Assertion assertion)'''addSingleTruthToList(«assertion.truth.name», «assertion.truth.list.value»);'''
//	
//	dispatch def generateJavaMinus(AssertionMinus minus)'''System.out.println(getSimpleTruth(«minus.check.first.name», «minus.check.first.list.value»));'''
	
	def deriveTargetFileNameFor(Model test, Resource resource) {
		resource.URI.appendFileExtension('txt').lastSegment
	}
}
