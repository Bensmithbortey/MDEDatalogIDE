/*
 * generated by Xtext 2.24.0
 */
grammar InternalDatalog;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.mde.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.mde.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.mde.services.DatalogGrammarAccess;

}

@parser::members {

 	private DatalogGrammarAccess grammarAccess;

    public InternalDatalogParser(TokenStream input, DatalogGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected DatalogGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getProgramStmtPlusMinusParserRuleCall_0());
			}
			lv_Program_0_0=ruleStmtPlusMinus
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"Program",
					lv_Program_0_0,
					"org.xtext.mde.Datalog.StmtPlusMinus");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStmtPlusMinus
entryRuleStmtPlusMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStmtPlusMinusRule()); }
	iv_ruleStmtPlusMinus=ruleStmtPlusMinus
	{ $current=$iv_ruleStmtPlusMinus.current; }
	EOF;

// Rule StmtPlusMinus
ruleStmtPlusMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStmtPlusMinusAccess().getLeftStmtPlusParserRuleCall_0_0());
				}
				lv_left_0_0=ruleStmtPlus
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStmtPlusMinusRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"org.xtext.mde.Datalog.StmtPlus");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStmtPlusMinusAccess().getRightStmtMinusParserRuleCall_1_0());
				}
				lv_right_1_0=ruleStmtMinus
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStmtPlusMinusRule());
					}
					set(
						$current,
						"right",
						lv_right_1_0,
						"org.xtext.mde.Datalog.StmtMinus");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStmtPlus
entryRuleStmtPlus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStmtPlusRule()); }
	iv_ruleStmtPlus=ruleStmtPlus
	{ $current=$iv_ruleStmtPlus.current; }
	EOF;

// Rule StmtPlus
ruleStmtPlus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_plus_0_0='+'
				{
					newLeafNode(lv_plus_0_0, grammarAccess.getStmtPlusAccess().getPlusPlusSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStmtPlusRule());
					}
					setWithLastConsumed($current, "plus", lv_plus_0_0, "+");
				}
			)
		)
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getStmtPlusAccess().getStmtPlusLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStmtPlusAccess().getRightPlusStatementsParserRuleCall_1_1_0());
					}
					lv_rightPlus_2_0=ruleStatements
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStmtPlusRule());
						}
						set(
							$current,
							"rightPlus",
							lv_rightPlus_2_0,
							"org.xtext.mde.Datalog.Statements");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleStmtMinus
entryRuleStmtMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStmtMinusRule()); }
	iv_ruleStmtMinus=ruleStmtMinus
	{ $current=$iv_ruleStmtMinus.current; }
	EOF;

// Rule StmtMinus
ruleStmtMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_minus_0_0='-'
				{
					newLeafNode(lv_minus_0_0, grammarAccess.getStmtMinusAccess().getMinusHyphenMinusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStmtMinusRule());
					}
					setWithLastConsumed($current, "minus", lv_minus_0_0, "-");
				}
			)
		)
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getStmtMinusAccess().getStmtMinusLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStmtMinusAccess().getRightMinusAssertionMinusParserRuleCall_1_1_0());
					}
					lv_rightMinus_2_0=ruleAssertionMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStmtMinusRule());
						}
						set(
							$current,
							"rightMinus",
							lv_rightMinus_2_0,
							"org.xtext.mde.Datalog.AssertionMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleStatements
entryRuleStatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementsRule()); }
	iv_ruleStatements=ruleStatements
	{ $current=$iv_ruleStatements.current; }
	EOF;

// Rule Statements
ruleStatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementsAccess().getConditionConditionsParserRuleCall_0_0());
				}
				lv_condition_0_0=ruleConditions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementsRule());
					}
					set(
						$current,
						"condition",
						lv_condition_0_0,
						"org.xtext.mde.Datalog.Conditions");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementsAccess().getAssertionAssertionParserRuleCall_1_0());
				}
				lv_assertion_1_0=ruleAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementsRule());
					}
					set(
						$current,
						"assertion",
						lv_assertion_1_0,
						"org.xtext.mde.Datalog.Assertion");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConditions
entryRuleConditions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionsRule()); }
	iv_ruleConditions=ruleConditions
	{ $current=$iv_ruleConditions.current; }
	EOF;

// Rule Conditions
ruleConditions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionsAccess().getCondAtomParserRuleCall_0_0());
				}
				lv_Cond_0_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionsRule());
					}
					set(
						$current,
						"Cond",
						lv_Cond_0_0,
						"org.xtext.mde.Datalog.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_Sign_1_0=':-'
				{
					newLeafNode(lv_Sign_1_0, grammarAccess.getConditionsAccess().getSignColonHyphenMinusKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionsRule());
					}
					setWithLastConsumed($current, "Sign", lv_Sign_1_0, ":-");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionsAccess().getRightFormulaCParserRuleCall_2_0());
				}
				lv_right_2_0=ruleFormulaC
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionsRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"org.xtext.mde.Datalog.FormulaC");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_dot_3_0='.'
				{
					newLeafNode(lv_dot_3_0, grammarAccess.getConditionsAccess().getDotFullStopKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionsRule());
					}
					setWithLastConsumed($current, "dot", lv_dot_3_0, ".");
				}
			)
		)
	)
;

// Entry rule entryRuleAssertion
entryRuleAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionRule()); }
	iv_ruleAssertion=ruleAssertion
	{ $current=$iv_ruleAssertion.current; }
	EOF;

// Rule Assertion
ruleAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertionAccess().getTruthAtomParserRuleCall_0_0());
				}
				lv_Truth_0_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertionRule());
					}
					set(
						$current,
						"Truth",
						lv_Truth_0_0,
						"org.xtext.mde.Datalog.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_dot_1_0='.'
				{
					newLeafNode(lv_dot_1_0, grammarAccess.getAssertionAccess().getDotFullStopKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssertionRule());
					}
					setWithLastConsumed($current, "dot", lv_dot_1_0, ".");
				}
			)
		)
	)
;

// Entry rule entryRuleAssertionMinus
entryRuleAssertionMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionMinusRule()); }
	iv_ruleAssertionMinus=ruleAssertionMinus
	{ $current=$iv_ruleAssertionMinus.current; }
	EOF;

// Rule AssertionMinus
ruleAssertionMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertionMinusAccess().getCheckFormulaCParserRuleCall_0_0());
				}
				lv_Check_0_0=ruleFormulaC
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertionMinusRule());
					}
					set(
						$current,
						"Check",
						lv_Check_0_0,
						"org.xtext.mde.Datalog.FormulaC");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_dot_1_0='.'
				{
					newLeafNode(lv_dot_1_0, grammarAccess.getAssertionMinusAccess().getDotFullStopKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssertionMinusRule());
					}
					setWithLastConsumed($current, "dot", lv_dot_1_0, ".");
				}
			)
		)
	)
;

// Entry rule entryRuleFormulaC
entryRuleFormulaC returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulaCRule()); }
	iv_ruleFormulaC=ruleFormulaC
	{ $current=$iv_ruleFormulaC.current; }
	EOF;

// Rule FormulaC
ruleFormulaC returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFormulaCAccess().getFirstAtomCParserRuleCall_0_0());
				}
				lv_First_0_0=ruleAtomC
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormulaCRule());
					}
					set(
						$current,
						"First",
						lv_First_0_0,
						"org.xtext.mde.Datalog.AtomC");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getFormulaCAccess().getFormulaLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_comma_2_0=','
					{
						newLeafNode(lv_comma_2_0, grammarAccess.getFormulaCAccess().getCommaCommaKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFormulaCRule());
						}
						setWithLastConsumed($current, "comma", lv_comma_2_0, ",");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaCAccess().getRightAtomCParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAtomC
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaCRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.mde.Datalog.AtomC");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_lp_1_0='('
				{
					newLeafNode(lv_lp_1_0, grammarAccess.getAtomAccess().getLpLeftParenthesisKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomRule());
					}
					setWithLastConsumed($current, "lp", lv_lp_1_0, "(");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAtomAccess().getListParamListParserRuleCall_2_0());
				}
				lv_list_2_0=ruleParamList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtomRule());
					}
					set(
						$current,
						"list",
						lv_list_2_0,
						"org.xtext.mde.Datalog.ParamList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_rp_3_0=')'
				{
					newLeafNode(lv_rp_3_0, grammarAccess.getAtomAccess().getRpRightParenthesisKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomRule());
					}
					setWithLastConsumed($current, "rp", lv_rp_3_0, ")");
				}
			)
		)
	)
;

// Entry rule entryRuleAtomC
entryRuleAtomC returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomCRule()); }
	iv_ruleAtomC=ruleAtomC
	{ $current=$iv_ruleAtomC.current; }
	EOF;

// Rule AtomC
ruleAtomC returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomCRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAtomCAccess().getNameAtomCrossReference_0_0());
				}
			)
		)
		(
			(
				lv_lp_1_0='('
				{
					newLeafNode(lv_lp_1_0, grammarAccess.getAtomCAccess().getLpLeftParenthesisKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomCRule());
					}
					setWithLastConsumed($current, "lp", lv_lp_1_0, "(");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAtomCAccess().getListParamListParserRuleCall_2_0());
				}
				lv_list_2_0=ruleParamList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtomCRule());
					}
					set(
						$current,
						"list",
						lv_list_2_0,
						"org.xtext.mde.Datalog.ParamList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_rp_3_0=')'
				{
					newLeafNode(lv_rp_3_0, grammarAccess.getAtomCAccess().getRpRightParenthesisKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomCRule());
					}
					setWithLastConsumed($current, "rp", lv_rp_3_0, ")");
				}
			)
		)
	)
;

// Entry rule entryRuleParamList
entryRuleParamList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamListRule()); }
	iv_ruleParamList=ruleParamList
	{ $current=$iv_ruleParamList.current; }
	EOF;

// Rule ParamList
ruleParamList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParamListAccess().getLeftPrimaryParserRuleCall_0_0());
				}
				lv_left_0_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParamListRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"org.xtext.mde.Datalog.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getParamListAccess().getParamListLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_comma_2_0=','
					{
						newLeafNode(lv_comma_2_0, grammarAccess.getParamListAccess().getCommaCommaKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamListRule());
						}
						setWithLastConsumed($current, "comma", lv_comma_2_0, ",");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getParamListAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParamListRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.mde.Datalog.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_ID
			{
				newLeafNode(lv_value_0_0, grammarAccess.getPrimaryAccess().getValueIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPrimaryRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
