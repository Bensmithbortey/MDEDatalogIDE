/**
 * generated by Xtext 2.24.0
 */
package org.xtext.mde.datalog.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.mde.datalog.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DatalogFactoryImpl extends EFactoryImpl implements DatalogFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DatalogFactory init()
  {
    try
    {
      DatalogFactory theDatalogFactory = (DatalogFactory)EPackage.Registry.INSTANCE.getEFactory(DatalogPackage.eNS_URI);
      if (theDatalogFactory != null)
      {
        return theDatalogFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DatalogFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DatalogFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DatalogPackage.MODEL: return createModel();
      case DatalogPackage.STATEMENTS: return createStatements();
      case DatalogPackage.CONDITIONS: return createConditions();
      case DatalogPackage.ASSERTION: return createAssertion();
      case DatalogPackage.FORMULA: return createFormula();
      case DatalogPackage.ATOM: return createAtom();
      case DatalogPackage.PAR: return createPar();
      case DatalogPackage.PARAMETER_INT: return createParameterInt();
      case DatalogPackage.PARAMETER_VAR: return createParameterVar();
      case DatalogPackage.PARAMETER_PRED: return createParameterPred();
      case DatalogPackage.PARAM_LIST: return createParamList();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statements createStatements()
  {
    StatementsImpl statements = new StatementsImpl();
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conditions createConditions()
  {
    ConditionsImpl conditions = new ConditionsImpl();
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assertion createAssertion()
  {
    AssertionImpl assertion = new AssertionImpl();
    return assertion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Formula createFormula()
  {
    FormulaImpl formula = new FormulaImpl();
    return formula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Atom createAtom()
  {
    AtomImpl atom = new AtomImpl();
    return atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Par createPar()
  {
    ParImpl par = new ParImpl();
    return par;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterInt createParameterInt()
  {
    ParameterIntImpl parameterInt = new ParameterIntImpl();
    return parameterInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterVar createParameterVar()
  {
    ParameterVarImpl parameterVar = new ParameterVarImpl();
    return parameterVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterPred createParameterPred()
  {
    ParameterPredImpl parameterPred = new ParameterPredImpl();
    return parameterPred;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamList createParamList()
  {
    ParamListImpl paramList = new ParamListImpl();
    return paramList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DatalogPackage getDatalogPackage()
  {
    return (DatalogPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DatalogPackage getPackage()
  {
    return DatalogPackage.eINSTANCE;
  }

} //DatalogFactoryImpl
