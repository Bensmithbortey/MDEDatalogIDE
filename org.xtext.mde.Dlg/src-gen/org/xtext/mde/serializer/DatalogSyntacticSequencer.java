/*
 * generated by Xtext 2.24.0
 */
package org.xtext.mde.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.mde.services.DatalogGrammarAccess;

@SuppressWarnings("all")
public class DatalogSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DatalogGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Statements_ComParserRuleCall_4_1_or_MinusSignParserRuleCall_1_1_or_PlusSignParserRuleCall_0_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DatalogGrammarAccess) access;
		match_Statements_ComParserRuleCall_4_1_or_MinusSignParserRuleCall_1_1_or_PlusSignParserRuleCall_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementsAccess().getComParserRuleCall_4_1()), new TokenAlias(false, false, grammarAccess.getStatementsAccess().getMinusSignParserRuleCall_1_1()), new TokenAlias(false, false, grammarAccess.getStatementsAccess().getPlusSignParserRuleCall_0_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getComRule())
			return getComToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMinusSignRule())
			return getMinusSignToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPlusSignRule())
			return getPlusSignToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Com:
	 * 	'/*' -> '*&#47;'
	 * ;
	 */
	protected String getComToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "/* */";
	}
	
	/**
	 * MinusSign:
	 * 	'-'
	 * ;
	 */
	protected String getMinusSignToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-";
	}
	
	/**
	 * PlusSign:
	 * 	'+'
	 * ;
	 */
	protected String getPlusSignToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Statements_ComParserRuleCall_4_1_or_MinusSignParserRuleCall_1_1_or_PlusSignParserRuleCall_0_1.equals(syntax))
				emit_Statements_ComParserRuleCall_4_1_or_MinusSignParserRuleCall_1_1_or_PlusSignParserRuleCall_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     PlusSign | MinusSign | Com
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Statements_ComParserRuleCall_4_1_or_MinusSignParserRuleCall_1_1_or_PlusSignParserRuleCall_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
