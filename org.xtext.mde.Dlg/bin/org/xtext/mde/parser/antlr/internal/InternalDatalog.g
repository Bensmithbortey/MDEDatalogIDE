/*
 * generated by Xtext 2.24.0
 */
grammar InternalDatalog;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.mde.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.mde.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.mde.services.DatalogGrammarAccess;

}

@parser::members {

 	private DatalogGrammarAccess grammarAccess;

    public InternalDatalogParser(TokenStream input, DatalogGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected DatalogGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getProgramStatementsParserRuleCall_0());
			}
			lv_Program_0_0=ruleStatements
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"Program",
					lv_Program_0_0,
					"org.xtext.mde.Datalog.Statements");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatements
entryRuleStatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementsRule()); }
	iv_ruleStatements=ruleStatements
	{ $current=$iv_ruleStatements.current; }
	EOF;

// Rule Statements
ruleStatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStatementsAccess().getStatementsAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getStatementsAccess().getPlusSignParserRuleCall_0_1());
			}
			rulePlusSign
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStatementsAccess().getStatementsAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getStatementsAccess().getMinusSignParserRuleCall_1_1());
			}
			ruleMinusSign
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getConditionsParserRuleCall_2());
		}
		this_Conditions_4=ruleConditions
		{
			$current = $this_Conditions_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getAssertionParserRuleCall_3());
		}
		this_Assertion_5=ruleAssertion
		{
			$current = $this_Assertion_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStatementsAccess().getStatementsAction_4_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getStatementsAccess().getComParserRuleCall_4_1());
			}
			ruleCom
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePlusSign
entryRulePlusSign returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPlusSignRule()); }
	iv_rulePlusSign=rulePlusSign
	{ $current=$iv_rulePlusSign.current.getText(); }
	EOF;

// Rule PlusSign
rulePlusSign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='+'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPlusSignAccess().getPlusSignKeyword());
	}
;

// Entry rule entryRuleMinusSign
entryRuleMinusSign returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMinusSignRule()); }
	iv_ruleMinusSign=ruleMinusSign
	{ $current=$iv_ruleMinusSign.current.getText(); }
	EOF;

// Rule MinusSign
ruleMinusSign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='-'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getMinusSignAccess().getHyphenMinusKeyword());
	}
;

// Entry rule entryRuleCom
entryRuleCom returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComRule()); }
	iv_ruleCom=ruleCom
	{ $current=$iv_ruleCom.current.getText(); }
	EOF;

// Rule Com
ruleCom returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='/*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComAccess().getSolidusAsteriskKeyword_0());
		}
		(
			('*/')=>
			kw='*/'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComAccess().getAsteriskSolidusKeyword_1());
			}
		)
	)
;

// Entry rule entryRuleConditions
entryRuleConditions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionsRule()); }
	iv_ruleConditions=ruleConditions
	{ $current=$iv_ruleConditions.current; }
	EOF;

// Rule Conditions
ruleConditions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionsAccess().getCondAtomParserRuleCall_0_0());
				}
				lv_Cond_0_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionsRule());
					}
					set(
						$current,
						"Cond",
						lv_Cond_0_0,
						"org.xtext.mde.Datalog.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':-'
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionsAccess().getColonHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionsAccess().getRightFormulaParserRuleCall_2_0());
				}
				lv_right_2_0=ruleFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionsRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"org.xtext.mde.Datalog.Formula");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getConditionsAccess().getFullStopKeyword_3());
		}
	)
;

// Entry rule entryRuleAssertion
entryRuleAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionRule()); }
	iv_ruleAssertion=ruleAssertion
	{ $current=$iv_ruleAssertion.current; }
	EOF;

// Rule Assertion
ruleAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertionAccess().getTruthFormulaParserRuleCall_0_0());
				}
				lv_Truth_0_0=ruleFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertionRule());
					}
					set(
						$current,
						"Truth",
						lv_Truth_0_0,
						"org.xtext.mde.Datalog.Formula");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getAssertionAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRuleFormula
entryRuleFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulaRule()); }
	iv_ruleFormula=ruleFormula
	{ $current=$iv_ruleFormula.current; }
	EOF;

// Rule Formula
ruleFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFormulaAccess().getAtomParserRuleCall_0());
		}
		this_Atom_0=ruleAtom
		{
			$current = $this_Atom_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getFormulaAccess().getFormulaLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getFormulaAccess().getCommaKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaAccess().getRightAtomParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAtom
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.mde.Datalog.Atom");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAtomAccess().getNameParameterPredParserRuleCall_0_0());
				}
				lv_name_0_0=ruleParameterPred
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtomRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.mde.Datalog.ParameterPred");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAtomAccess().getListParamListParserRuleCall_2_0());
				}
				lv_list_2_0=ruleParamList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtomRule());
					}
					set(
						$current,
						"list",
						lv_list_2_0,
						"org.xtext.mde.Datalog.ParamList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getAtomAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleParamList
entryRuleParamList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamListRule()); }
	iv_ruleParamList=ruleParamList
	{ $current=$iv_ruleParamList.current; }
	EOF;

// Rule ParamList
ruleParamList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParamListAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getParamListAccess().getParamListLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getParamListAccess().getCommaKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParamListAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParamListRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.mde.Datalog.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getParameterPredParserRuleCall_0());
		}
		this_ParameterPred_0=ruleParameterPred
		{
			$current = $this_ParameterPred_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getParameterVarParserRuleCall_1());
		}
		this_ParameterVar_1=ruleParameterVar
		{
			$current = $this_ParameterVar_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getParameterIntParserRuleCall_2());
		}
		this_ParameterInt_2=ruleParameterInt
		{
			$current = $this_ParameterInt_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParameterInt
entryRuleParameterInt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterIntRule()); }
	iv_ruleParameterInt=ruleParameterInt
	{ $current=$iv_ruleParameterInt.current; }
	EOF;

// Rule ParameterInt
ruleParameterInt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_int_0_0=RULE_INT
			{
				newLeafNode(lv_int_0_0, grammarAccess.getParameterIntAccess().getIntINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParameterIntRule());
				}
				setWithLastConsumed(
					$current,
					"int",
					lv_int_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleParameterVar
entryRuleParameterVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterVarRule()); }
	iv_ruleParameterVar=ruleParameterVar
	{ $current=$iv_ruleParameterVar.current; }
	EOF;

// Rule ParameterVar
ruleParameterVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_up_0_0=RULE_VARIABLE
			{
				newLeafNode(lv_up_0_0, grammarAccess.getParameterVarAccess().getUpVARIABLETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParameterVarRule());
				}
				setWithLastConsumed(
					$current,
					"up",
					lv_up_0_0,
					"org.xtext.mde.Datalog.VARIABLE");
			}
		)
	)
;

// Entry rule entryRuleParameterPred
entryRuleParameterPred returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterPredRule()); }
	iv_ruleParameterPred=ruleParameterPred
	{ $current=$iv_ruleParameterPred.current; }
	EOF;

// Rule ParameterPred
ruleParameterPred returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_low_0_0=RULE_PREDICATE
			{
				newLeafNode(lv_low_0_0, grammarAccess.getParameterPredAccess().getLowPREDICATETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParameterPredRule());
				}
				setWithLastConsumed(
					$current,
					"low",
					lv_low_0_0,
					"org.xtext.mde.Datalog.PREDICATE");
			}
		)
	)
;

RULE_PREDICATE : 'a'..'z' ('a'..'z'|'0'..'9'|'A'..'Z'|'_')*;

RULE_VARIABLE : 'A'..'Z' ('A'..'Z'|'a'..'z'|'0'..'9'|'_')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
