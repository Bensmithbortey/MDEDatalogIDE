/*
 * generated by Xtext 2.24.0
 */
package org.xtext.mde.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.mde.ide.contentassist.antlr.internal.InternalDatalogParser;
import org.xtext.mde.services.DatalogGrammarAccess;

public class DatalogParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DatalogGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DatalogGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementsAccess().getAlternatives(), "rule__Statements__Alternatives");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getStatementsAccess().getGroup_0(), "rule__Statements__Group_0__0");
			builder.put(grammarAccess.getStatementsAccess().getGroup_1(), "rule__Statements__Group_1__0");
			builder.put(grammarAccess.getCommentAccess().getGroup(), "rule__Comment__Group__0");
			builder.put(grammarAccess.getFormAccess().getGroup(), "rule__Form__Group__0");
			builder.put(grammarAccess.getAssertionAccess().getGroup(), "rule__Assertion__Group__0");
			builder.put(grammarAccess.getFormulaAccess().getGroup(), "rule__Formula__Group__0");
			builder.put(grammarAccess.getFormulaAccess().getGroup_1(), "rule__Formula__Group_1__0");
			builder.put(grammarAccess.getAtomAccess().getGroup(), "rule__Atom__Group__0");
			builder.put(grammarAccess.getParamListAccess().getGroup(), "rule__ParamList__Group__0");
			builder.put(grammarAccess.getParamListAccess().getGroup_1(), "rule__ParamList__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getProgramAssignment(), "rule__Model__ProgramAssignment");
			builder.put(grammarAccess.getCommentAccess().getTextAssignment_1(), "rule__Comment__TextAssignment_1");
			builder.put(grammarAccess.getFormAccess().getRightAssignment_2(), "rule__Form__RightAssignment_2");
			builder.put(grammarAccess.getFormulaAccess().getRightAssignment_1_2(), "rule__Formula__RightAssignment_1_2");
			builder.put(grammarAccess.getAtomAccess().getListAssignment_2(), "rule__Atom__ListAssignment_2");
			builder.put(grammarAccess.getParamListAccess().getRightAssignment_1_2(), "rule__ParamList__RightAssignment_1_2");
			builder.put(grammarAccess.getParameterIntAccess().getIntAssignment(), "rule__ParameterInt__IntAssignment");
			builder.put(grammarAccess.getParameterVarAccess().getUpAssignment(), "rule__ParameterVar__UpAssignment");
			builder.put(grammarAccess.getParameterPredAccess().getLowAssignment(), "rule__ParameterPred__LowAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DatalogGrammarAccess grammarAccess;

	@Override
	protected InternalDatalogParser createParser() {
		InternalDatalogParser result = new InternalDatalogParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DatalogGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DatalogGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
