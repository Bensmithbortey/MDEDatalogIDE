/*
 * generated by Xtext 2.24.0
 */
grammar InternalDatalog;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.mde.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.mde.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.mde.services.DatalogGrammarAccess;

}
@parser::members {
	private DatalogGrammarAccess grammarAccess;

	public void setGrammarAccess(DatalogGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getProgramAssignment()); }
		(rule__Model__ProgramAssignment)*
		{ after(grammarAccess.getModelAccess().getProgramAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatements
entryRuleStatements
:
{ before(grammarAccess.getStatementsRule()); }
	 ruleStatements
{ after(grammarAccess.getStatementsRule()); } 
	 EOF 
;

// Rule Statements
ruleStatements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementsAccess().getAlternatives()); }
		(rule__Statements__Alternatives)
		{ after(grammarAccess.getStatementsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlusSign
entryRulePlusSign
:
{ before(grammarAccess.getPlusSignRule()); }
	 rulePlusSign
{ after(grammarAccess.getPlusSignRule()); } 
	 EOF 
;

// Rule PlusSign
rulePlusSign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusSignAccess().getPlusSignKeyword()); }
		'+'
		{ after(grammarAccess.getPlusSignAccess().getPlusSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMinusSign
entryRuleMinusSign
:
{ before(grammarAccess.getMinusSignRule()); }
	 ruleMinusSign
{ after(grammarAccess.getMinusSignRule()); } 
	 EOF 
;

// Rule MinusSign
ruleMinusSign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMinusSignAccess().getHyphenMinusKeyword()); }
		'-'
		{ after(grammarAccess.getMinusSignAccess().getHyphenMinusKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCom
entryRuleCom
:
{ before(grammarAccess.getComRule()); }
	 ruleCom
{ after(grammarAccess.getComRule()); } 
	 EOF 
;

// Rule Com
ruleCom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComAccess().getGroup()); }
		(rule__Com__Group__0)
		{ after(grammarAccess.getComAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditions
entryRuleConditions
:
{ before(grammarAccess.getConditionsRule()); }
	 ruleConditions
{ after(grammarAccess.getConditionsRule()); } 
	 EOF 
;

// Rule Conditions
ruleConditions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionsAccess().getGroup()); }
		(rule__Conditions__Group__0)
		{ after(grammarAccess.getConditionsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssertion
entryRuleAssertion
:
{ before(grammarAccess.getAssertionRule()); }
	 ruleAssertion
{ after(grammarAccess.getAssertionRule()); } 
	 EOF 
;

// Rule Assertion
ruleAssertion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssertionAccess().getGroup()); }
		(rule__Assertion__Group__0)
		{ after(grammarAccess.getAssertionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFormula
entryRuleFormula
:
{ before(grammarAccess.getFormulaRule()); }
	 ruleFormula
{ after(grammarAccess.getFormulaRule()); } 
	 EOF 
;

// Rule Formula
ruleFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFormulaAccess().getGroup()); }
		(rule__Formula__Group__0)
		{ after(grammarAccess.getFormulaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtom
entryRuleAtom
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomAccess().getGroup()); }
		(rule__Atom__Group__0)
		{ after(grammarAccess.getAtomAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParamList
entryRuleParamList
:
{ before(grammarAccess.getParamListRule()); }
	 ruleParamList
{ after(grammarAccess.getParamListRule()); } 
	 EOF 
;

// Rule ParamList
ruleParamList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamListAccess().getGroup()); }
		(rule__ParamList__Group__0)
		{ after(grammarAccess.getParamListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterInt
entryRuleParameterInt
:
{ before(grammarAccess.getParameterIntRule()); }
	 ruleParameterInt
{ after(grammarAccess.getParameterIntRule()); } 
	 EOF 
;

// Rule ParameterInt
ruleParameterInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterIntAccess().getIntAssignment()); }
		(rule__ParameterInt__IntAssignment)
		{ after(grammarAccess.getParameterIntAccess().getIntAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterVar
entryRuleParameterVar
:
{ before(grammarAccess.getParameterVarRule()); }
	 ruleParameterVar
{ after(grammarAccess.getParameterVarRule()); } 
	 EOF 
;

// Rule ParameterVar
ruleParameterVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterVarAccess().getUpAssignment()); }
		(rule__ParameterVar__UpAssignment)
		{ after(grammarAccess.getParameterVarAccess().getUpAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterPred
entryRuleParameterPred
:
{ before(grammarAccess.getParameterPredRule()); }
	 ruleParameterPred
{ after(grammarAccess.getParameterPredRule()); } 
	 EOF 
;

// Rule ParameterPred
ruleParameterPred 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterPredAccess().getLowAssignment()); }
		(rule__ParameterPred__LowAssignment)
		{ after(grammarAccess.getParameterPredAccess().getLowAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementsAccess().getGroup_0()); }
		(rule__Statements__Group_0__0)
		{ after(grammarAccess.getStatementsAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getGroup_1()); }
		(rule__Statements__Group_1__0)
		{ after(grammarAccess.getStatementsAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getConditionsParserRuleCall_2()); }
		ruleConditions
		{ after(grammarAccess.getStatementsAccess().getConditionsParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getAssertionParserRuleCall_3()); }
		ruleAssertion
		{ after(grammarAccess.getStatementsAccess().getAssertionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getGroup_4()); }
		(rule__Statements__Group_4__0)
		{ after(grammarAccess.getStatementsAccess().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getParameterPredParserRuleCall_0()); }
		ruleParameterPred
		{ after(grammarAccess.getPrimaryAccess().getParameterPredParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getParameterVarParserRuleCall_1()); }
		ruleParameterVar
		{ after(grammarAccess.getPrimaryAccess().getParameterVarParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getParameterIntParserRuleCall_2()); }
		ruleParameterInt
		{ after(grammarAccess.getPrimaryAccess().getParameterIntParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statements__Group_0__0__Impl
	rule__Statements__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementsAccess().getStatementsAction_0_0()); }
	()
	{ after(grammarAccess.getStatementsAccess().getStatementsAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statements__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementsAccess().getPlusSignParserRuleCall_0_1()); }
	rulePlusSign
	{ after(grammarAccess.getStatementsAccess().getPlusSignParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statements__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statements__Group_1__0__Impl
	rule__Statements__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementsAccess().getStatementsAction_1_0()); }
	()
	{ after(grammarAccess.getStatementsAccess().getStatementsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statements__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementsAccess().getMinusSignParserRuleCall_1_1()); }
	ruleMinusSign
	{ after(grammarAccess.getStatementsAccess().getMinusSignParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statements__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statements__Group_4__0__Impl
	rule__Statements__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementsAccess().getStatementsAction_4_0()); }
	()
	{ after(grammarAccess.getStatementsAccess().getStatementsAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statements__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementsAccess().getComParserRuleCall_4_1()); }
	ruleCom
	{ after(grammarAccess.getStatementsAccess().getComParserRuleCall_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Com__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Com__Group__0__Impl
	rule__Com__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Com__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComAccess().getSolidusAsteriskKeyword_0()); }
	'/*'
	{ after(grammarAccess.getComAccess().getSolidusAsteriskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Com__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Com__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Com__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComAccess().getAsteriskSolidusKeyword_1()); }
	('*/')
	{ after(grammarAccess.getComAccess().getAsteriskSolidusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conditions__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditions__Group__0__Impl
	rule__Conditions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditions__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionsAccess().getCondAssignment_0()); }
	(rule__Conditions__CondAssignment_0)
	{ after(grammarAccess.getConditionsAccess().getCondAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditions__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditions__Group__1__Impl
	rule__Conditions__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditions__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionsAccess().getColonHyphenMinusKeyword_1()); }
	':-'
	{ after(grammarAccess.getConditionsAccess().getColonHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditions__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditions__Group__2__Impl
	rule__Conditions__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditions__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionsAccess().getRightAssignment_2()); }
	(rule__Conditions__RightAssignment_2)
	{ after(grammarAccess.getConditionsAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditions__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditions__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditions__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionsAccess().getFullStopKeyword_3()); }
	'.'
	{ after(grammarAccess.getConditionsAccess().getFullStopKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assertion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assertion__Group__0__Impl
	rule__Assertion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertionAccess().getTruthAssignment_0()); }
	(rule__Assertion__TruthAssignment_0)
	{ after(grammarAccess.getAssertionAccess().getTruthAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assertion__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertionAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getAssertionAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Formula__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group__0__Impl
	rule__Formula__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getAtomParserRuleCall_0()); }
	ruleAtom
	{ after(grammarAccess.getFormulaAccess().getAtomParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getGroup_1()); }
	(rule__Formula__Group_1__0)*
	{ after(grammarAccess.getFormulaAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Formula__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group_1__0__Impl
	rule__Formula__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getFormulaLeftAction_1_0()); }
	()
	{ after(grammarAccess.getFormulaAccess().getFormulaLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group_1__1__Impl
	rule__Formula__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getCommaKeyword_1_1()); }
	','
	{ after(grammarAccess.getFormulaAccess().getCommaKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getRightAssignment_1_2()); }
	(rule__Formula__RightAssignment_1_2)
	{ after(grammarAccess.getFormulaAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group__0__Impl
	rule__Atom__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getNameAssignment_0()); }
	(rule__Atom__NameAssignment_0)
	{ after(grammarAccess.getAtomAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group__1__Impl
	rule__Atom__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group__2__Impl
	rule__Atom__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getListAssignment_2()); }
	(rule__Atom__ListAssignment_2)
	{ after(grammarAccess.getAtomAccess().getListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamList__Group__0__Impl
	rule__ParamList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamListAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getParamListAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamListAccess().getGroup_1()); }
	(rule__ParamList__Group_1__0)*
	{ after(grammarAccess.getParamListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamList__Group_1__0__Impl
	rule__ParamList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamListAccess().getParamListLeftAction_1_0()); }
	()
	{ after(grammarAccess.getParamListAccess().getParamListLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamList__Group_1__1__Impl
	rule__ParamList__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamListAccess().getCommaKeyword_1_1()); }
	','
	{ after(grammarAccess.getParamListAccess().getCommaKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamList__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamList__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamList__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamListAccess().getRightAssignment_1_2()); }
	(rule__ParamList__RightAssignment_1_2)
	{ after(grammarAccess.getParamListAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ProgramAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProgramStatementsParserRuleCall_0()); }
		ruleStatements
		{ after(grammarAccess.getModelAccess().getProgramStatementsParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditions__CondAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionsAccess().getCondAtomParserRuleCall_0_0()); }
		ruleAtom
		{ after(grammarAccess.getConditionsAccess().getCondAtomParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditions__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionsAccess().getRightFormulaParserRuleCall_2_0()); }
		ruleFormula
		{ after(grammarAccess.getConditionsAccess().getRightFormulaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__TruthAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssertionAccess().getTruthFormulaParserRuleCall_0_0()); }
		ruleFormula
		{ after(grammarAccess.getAssertionAccess().getTruthFormulaParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaAccess().getRightAtomParserRuleCall_1_2_0()); }
		ruleAtom
		{ after(grammarAccess.getFormulaAccess().getRightAtomParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getNameParameterPredParserRuleCall_0_0()); }
		ruleParameterPred
		{ after(grammarAccess.getAtomAccess().getNameParameterPredParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__ListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getListParamListParserRuleCall_2_0()); }
		ruleParamList
		{ after(grammarAccess.getAtomAccess().getListParamListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamList__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamListAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getParamListAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterInt__IntAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterIntAccess().getIntINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getParameterIntAccess().getIntINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterVar__UpAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterVarAccess().getUpVARIABLETerminalRuleCall_0()); }
		RULE_VARIABLE
		{ after(grammarAccess.getParameterVarAccess().getUpVARIABLETerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterPred__LowAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterPredAccess().getLowPREDICATETerminalRuleCall_0()); }
		RULE_PREDICATE
		{ after(grammarAccess.getParameterPredAccess().getLowPREDICATETerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_PREDICATE : 'a'..'z' ('a'..'z'|'0'..'9'|'A'..'Z'|'_')*;

RULE_VARIABLE : 'A'..'Z' ('A'..'Z'|'a'..'z'|'0'..'9'|'_')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
